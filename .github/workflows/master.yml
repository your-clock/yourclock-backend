name: building-and-deployment

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env: 
  project_name: "yourclock-backend-node"
  app_name: "your-clock"
  language: "javascript" #javascript, java, python
  branch_default: "master"

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      KEY_SHA1: ${{ secrets.KEY_SHA1 }}
      KEY_TOKEN: ${{ secrets.KEY_TOKEN }}
      ETHEREAL_HOST: ${{ secrets.ETHEREAL_HOST }}
      ETHEREAL_PORT: ${{ secrets.ETHEREAL_PORT }}
      ETHEREAL_PWD: ${{ secrets.ETHEREAL_PWD }}
      ETHEREAL_USER: ${{ secrets.ETHEREAL_USER }}
      SECRET_SESSION: ${{ secrets.SECRET_SESSION }}
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Install and build tests
        shell: bash
        run: npm ci && npm run test:coverage
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: lcov-report
          retention-days: 1
          path: coverage/lcov.info

  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download coverage report
      uses: actions/download-artifact@v2
      with:
        name: lcov-report
        path: coverage
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: SonarCloud Verify results
      shell: bash
      run: |
        state_sonar=$(curl --location --request GET 'https://sonarcloud.io/api/qualitygates/project_status?projectKey=your-clock_${{ env.project_name }}&branch=${{ env.branch_default }}' | jq '.projectStatus.status')
        if [ "$state_sonar" != "\"OK\"" ]; then echo "Quality Gate with state: $state_sonar"; exit 1; else echo "Quality Gate OK"; exit 0; fi
        
  deploy-heroku:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: sonar
    environment: prod
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ env.app_name }}
          heroku_email: ${{ secrets.HEROKU_USER }}